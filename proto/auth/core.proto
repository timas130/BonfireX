syntax = "proto3";

import "types.proto";

package bfx.auth;

service AuthCore {
  rpc GetUsersByIds (GetUsersByIdsRequest) returns (GetUsersByIdsReply);

  rpc CreateUser (CreateUserRequest) returns (CreateUserReply);

  rpc LoginEmail (LoginEmailRequest) returns (LoginEmailReply);

  rpc GetUserByToken (GetUserByTokenRequest) returns (GetUserByTokenReply);

  rpc SendVerificationEmail (SendVerificationEmailRequest) returns (SendVerificationEmailReply);

  rpc VerifyEmail (VerifyEmailRequest) returns (VerifyEmailReply);

  rpc ChangePassword (ChangePasswordRequest) returns (ChangePasswordReply);

  rpc GetUserByEmail (GetUserByEmailRequest) returns (GetUserByEmailReply);

  rpc LoginExternal (LoginExternalRequest) returns (LoginExternalReply);
}

enum PermissionLevel {
  USER = 0;
  ADMIN = 10;
  SYSTEM = 20;
}

message User {
  int64 id = 1;
  optional string email = 2;
  PermissionLevel permission_level = 3;
  bool banned = 4;
  bool active = 5;
  bfx.DateTime email_verification_sent_at = 6;
  bfx.DateTime created_at = 7;
}

message GetUsersByIdsRequest {
  repeated int64 ids = 1;
}
message GetUsersByIdsReply {
  repeated User users = 1;
}

message CreateUserRequest {
  optional string email = 1;
  bool active = 2;
  optional string password = 3;
  UserContext user_context = 4;
}
message CreateUserReply {
  User user = 1;
  Tokens tokens = 2;
}

message LoginEmailRequest {
  string email = 1;
  string password = 2;
  bfx.UserContext user_context = 3;
}
message LoginEmailReply {
  oneof login_result {
    Tokens tokens = 1;
    TfaChallenge tfa_challenge = 2;
  }
}

message TfaChallenge {
  string tfa_wait_token = 1;
  repeated TfaMethod methods = 2;
}

enum TfaMethod {
  EMAIL_LINK = 0;
  TOTP = 1;
  RECOVERY_CODE = 2;
}

message Tokens {
  string access_token = 1;
  int64 session_id = 2;
  optional int64 login_attempt_id = 3;
}

enum LoginAttemptStatus {
  SUCCESS = 0;
  INCORRECT_PASSWORD = 1;
  TOO_MANY_ATTEMPTS = 2;
  TFA_PENDING = 3;
}

message GetUserByTokenRequest {
  string access_token = 1;
}

message Session {
  int64 id = 1;
  int64 user_id = 2;
  bfx.UserContext user_context = 3;
  bfx.DateTime expires_at = 4;
  bfx.DateTime created_at = 5;
}

message GetUserByTokenReply {
  User user = 1;
  Session session = 2;
}

message SendVerificationEmailRequest {
  string email = 1;
  bfx.UserContext user_context = 2;
}

message SendVerificationEmailReply {
}

message VerifyEmailRequest {
  string token = 1;
}

message VerifyEmailReply {
  User user = 1;
}

message ChangePasswordRequest {
  int64 user_id = 1;
  // if present, the user is changing their own password
  // otherwise, it's another service changing the password of the user
  optional string old_password = 2;
  string new_password = 3;
  bfx.UserContext user_context = 4;
  bool terminate_all_sessions = 5;
}

message ChangePasswordReply {
}

message GetUserByEmailRequest {
  string email = 1;
}

message GetUserByEmailReply {
  optional User user = 1;
}

message LoginExternalRequest {
  int64 user_id = 1;
  bfx.UserContext user_context = 2;
}

message LoginExternalReply {
  Tokens tokens = 1;
}
